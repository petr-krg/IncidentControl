CREATE TABLE "persons" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "first_name" varchar(50),
  "last_name" varchar(50),
  "pat_name" varchar(50),
  "email" varchar(255) UNIQUE,
  "phone" varchar(20) UNIQUE,
  "birthdate" date,
  "gender" smallint,
  "employee" smallint default 0,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "users" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_name" varchar(50) UNIQUE,
  "login" varchar(50) UNIQUE,
  "password" varchar(255),
  "person_id" bigint,
  "department_id" bigint,
  "position_id" bigint,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "departments" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(512),
  "description" varchar(512) DEFAULT '',
  "parent_id" bigint DEFAULT NULL,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "positions" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(512),
  "department_id" bigint,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "roles" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "role_name" varchar(50) UNIQUE,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "access" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "resource" varchar(512),
  "permission" varchar(128),
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE,
  "role_id" int
);

CREATE TABLE "user_role" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" bigint,
  "role_id" bigint,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "request_categories" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(512) UNIQUE,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE
);

CREATE TABLE "incidents" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar,
  "description" text,
  "status" varchar,
  "priority" int,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE,
  "category_id" int,
  "user_id" bigint
);

CREATE TABLE "incident_links" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "object_type" int,
  "object_id" int
);

CREATE TABLE "comments" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "comment" text,
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE,
  "user_id" bigint,
  "incident_id" bigint
);

CREATE TABLE "attachments" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "file_name" varchar(256),
  "file_type" varchar(10),
  "file_folder" varchar(256),
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE,
  "user_id" bigint,
  "incident_id" bigint
);

CREATE TABLE "notifications" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "message" varchar(512),
  "created" TIMESTAMP WITHOUT TIME ZONE,
  "updated" TIMESTAMP WITHOUT TIME ZONE,
  "object_type" int,
  "object_id" int
);

CREATE TABLE "clients" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(1024),
  "bin" varchar(12),
  "address" varchar(256),
  "status" smallint default 0,
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

CREATE TABLE "objects" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(1024),
  "address" varchar(256),
  "status" smallint default 0,
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

CREATE TABLE "client_objects" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "client_id" BIGINT,
  "object_id" BIGINT,
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

CREATE TABLE "client_persons" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "person_id" BIGINT,
  "client_id" BIGINT,
  "primary" bit default B'0',
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

CREATE TABLE "external_positions" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(256),
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

CREATE TABLE "client_position" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "person_id" BIGINT,
  "ex_position" BIGINT,
  "created" TIMESTAMP,
  "updated" TIMESTAMP
);

COMMENT ON COLUMN "persons"."gender" IS 'CHECK (gender IN (0, 1))';
COMMENT ON COLUMN "access"."permission" IS '"read", "write", "execute" etc';
COMMENT ON TABLE "incident_links" IS 'Если `object_type` = 0, то `object_id` ссылается на `departments`,
     Если `object_type` = 1, то `object_id` ссылается на `users`.';
COMMENT ON TABLE "notifications" IS 'Если `object_type` = 0, то `object_id` ссылается на `departments`,
     Если `object_type` = 1, то `object_id` ссылается на `users`.';

ALTER TABLE "users" ADD FOREIGN KEY ("person_id") REFERENCES "persons" ("id");
ALTER TABLE "users" ADD FOREIGN KEY ("department_id") REFERENCES "departments" ("id");
ALTER TABLE "users" ADD FOREIGN KEY ("position_id") REFERENCES "positions" ("id");
ALTER TABLE "departments" ADD FOREIGN KEY ("parent_id") REFERENCES "departments" ("id");
ALTER TABLE "positions" ADD FOREIGN KEY ("department_id") REFERENCES "departments" ("id");
ALTER TABLE "access" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");
ALTER TABLE "user_role" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
ALTER TABLE "user_role" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");
ALTER TABLE "incidents" ADD FOREIGN KEY ("category_id") REFERENCES "request_categories" ("id");
ALTER TABLE "incidents" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
ALTER TABLE "incident_links" ADD FOREIGN KEY ("object_id") REFERENCES "users" ("id");
ALTER TABLE "incident_links" ADD FOREIGN KEY ("object_id") REFERENCES "departments" ("id");
ALTER TABLE "comments" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
ALTER TABLE "comments" ADD FOREIGN KEY ("incident_id") REFERENCES "incidents" ("id");
ALTER TABLE "attachments" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
ALTER TABLE "attachments" ADD FOREIGN KEY ("incident_id") REFERENCES "incidents" ("id");
ALTER TABLE "notifications" ADD FOREIGN KEY ("object_id") REFERENCES "users" ("id");
ALTER TABLE "notifications" ADD FOREIGN KEY ("object_id") REFERENCES "departments" ("id");
ALTER TABLE "client_objects" ADD FOREIGN KEY ("client_id") REFERENCES "clients" ("id");
ALTER TABLE "client_objects" ADD FOREIGN KEY ("client_id") REFERENCES "objects" ("id");
ALTER TABLE "client_persons" ADD FOREIGN KEY ("client_id") REFERENCES "clients" ("id");
ALTER TABLE "client_persons" ADD FOREIGN KEY ("person_id") REFERENCES "persons" ("id");
ALTER TABLE "client_persons" ADD FOREIGN KEY ("client_id") REFERENCES "objects" ("id");
ALTER TABLE "client_position" ADD FOREIGN KEY ("person_id") REFERENCES "persons" ("id");
ALTER TABLE "client_position" ADD FOREIGN KEY ("ex_position") REFERENCES "external_positions" ("id");

CREATE OR REPLACE FUNCTION update_insert_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.created := NOW();
  NEW.updated := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- triggers persons
CREATE TRIGGER insert_trigger
BEFORE INSERT ON persons
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON persons
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers users
CREATE TRIGGER insert_trigger
BEFORE INSERT ON users
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers departments
CREATE TRIGGER insert_trigger
BEFORE INSERT ON departments
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON departments
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers positions
CREATE TRIGGER insert_trigger
BEFORE INSERT ON positions
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON positions
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers roles
CREATE TRIGGER insert_trigger
BEFORE INSERT ON roles
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON roles
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers access
CREATE TRIGGER insert_trigger
BEFORE INSERT ON access
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON access
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers user_role
CREATE TRIGGER insert_trigger
BEFORE INSERT ON user_role
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON user_role
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers request_categories
CREATE TRIGGER insert_trigger
BEFORE INSERT ON request_categories
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON request_categories
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers incidents
CREATE TRIGGER insert_trigger
BEFORE INSERT ON incidents
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON incidents
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers comments
CREATE TRIGGER insert_trigger
BEFORE INSERT ON comments
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON comments
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers attachments
CREATE TRIGGER insert_trigger
BEFORE INSERT ON attachments
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON attachments
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers notifications
CREATE TRIGGER insert_trigger
BEFORE INSERT ON notifications
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON notifications
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers clients
CREATE TRIGGER insert_trigger
BEFORE INSERT ON clients
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON clients
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers objects
CREATE TRIGGER insert_trigger
BEFORE INSERT ON objects
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON objects
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers client_objects
CREATE TRIGGER insert_trigger
BEFORE INSERT ON client_objects
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON client_objects
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers client_objects
CREATE TRIGGER insert_trigger
BEFORE INSERT ON client_persons
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON client_persons
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers client_position
CREATE TRIGGER insert_trigger
BEFORE INSERT ON client_position
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON client_position
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- triggers external_positions
CREATE TRIGGER insert_trigger
BEFORE INSERT ON external_positions
FOR EACH ROW
EXECUTE FUNCTION update_insert_timestamp();

CREATE TRIGGER update_trigger
BEFORE UPDATE ON external_positions
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();